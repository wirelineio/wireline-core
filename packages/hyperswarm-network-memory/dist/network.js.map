{"version":3,"sources":["../src/network.js"],"names":["discovery","Discovery","Network","EventEmitter","constructor","args","id","_id","crypto","randomBytes","_connections","Map","join","topic","lookup","peerId","connection","details","_deleteConnection","_addConnection","leave","forEach","peer","compare","destroy","client","key","toString","has","oldConnection","get","set","emit","Object","assign","currentConnection","delete"],"mappings":"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","sourcesContent":["//\n// Copyright 2019 Wireline, Inc.\n//\n\nimport { EventEmitter } from 'events';\nimport crypto from 'crypto';\nimport eos from 'end-of-stream';\n\nimport { Discovery } from './discovery';\n\nconst discovery = new Discovery();\n\nclass Network extends EventEmitter {\n  constructor(args = {}) {\n    super();\n\n    const { id } = args;\n\n    this._id = id || crypto.randomBytes(32);\n\n    this._connections = new Map();\n  }\n\n  join(topic) {\n    discovery.lookup({ peerId: this._id, topic }, (connection, details) => {\n      eos(connection, () => {\n        this._deleteConnection(connection, details);\n      });\n\n      this._addConnection(connection, details);\n    });\n  }\n\n  leave(topic) {\n    discovery.leave({ peerId: this._id, topic });\n\n    this._connections.forEach(({ connection, details }) => {\n      const { peer } = details;\n      if (topic.compare(peer.topic) === 0) {\n        connection.destroy();\n      }\n    });\n  }\n\n  _addConnection(connection, details) {\n    const { id, client, peer } = details;\n\n    const key = `${peer.topic.toString('hex')}/${id.toString('hex')}`;\n\n    if (this._connections.has(key)) {\n      const { connection: oldConnection } = this._connections.get(key);\n      oldConnection.destroy();\n    }\n\n    this._connections.set(key, { connection, details });\n\n    this.emit('connection', connection, Object.assign({}, details, { peer: client ? peer : null }));\n  }\n\n  _deleteConnection(connection, details) {\n    const { id, client, peer } = details;\n\n    const key = `${peer.topic.toString('hex')}/${id.toString('hex')}`;\n\n    if (!this._connections.has(key)) {\n      return;\n    }\n\n    const { connection: currentConnection } = this._connections.get(key);\n\n    if (connection === currentConnection) {\n      this._connections.delete(key);\n      this.emit('disconnection', connection, Object.assign({}, details, { peer: client ? peer : null }));\n    }\n  }\n}\n\nexport default Network;\n"],"file":"network.js"}