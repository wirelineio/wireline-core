syntax = "proto3";
package credentials;

message PublicKey {
  bytes key = 1;
}

message Signature {
  bytes signature = 1;
  PublicKey key = 2;
}

// This portion needs stably sorted for signing and verification.
message PartyGenesis {
  bytes type = 1;  // party.genesis
  PublicKey party = 2; // The party public key.
  PublicKey feed = 3; // The initial feed to admit.
  PublicKey admit = 4; // The key to admit (usually a pseudonym key).
  bytes nonce = 5;
  Timestamp created = 6;
}

message SignedPartyGenesis {
  PartyGenesis message = 1;
  Signature partyKeySignature = 2; // Must be signed by the party private key.
  Signature admittedKeySignature = 3; // Must be signed by the key in 'admit'.
}

message PartyGenesisOnFeed {
  bytes id = 1;
  bytes type = 2; // This matches the PartyGenesis type, but is outside the signed portion of the message.
  Timestamp timestamp = 3;
  SignedPartyGenesis data = 4;
}

// This portion needs stably sorted for signing and verification.
message KeyAdmit {
  bytes type = 1;  // party.admit.key
  PublicKey party = 2;
  bytes nonce = 3;
  Timestamp created = 4;
  PublicKey admit = 5; // The key to admit.
}

message SignedKeyAdmit {
  KeyAdmit message = 1;
  Signature signature = 2; // To be valid, the signature must be from a key previously admitted to the party.
}

message KeyAdmitOnFeed {
  bytes id = 1;
  bytes parent = 2; // The id of the message admitting the signing key.
  bytes type = 3; // This matches the KeyAdmit type, but is outside the signed portion of the message.
  Timestamp timestamp = 4;
  SignedKeyAdmit data = 5; 
}

// This portion needs stably sorted for signing and verification.
message FeedAdmit {
  bytes type = 1;  // party.admit.feed
  PublicKey party = 2;
  PublicKey feed = 3; // The feed public key.
  bytes nonce = 3;
  Timestamp created = 4;
}

message SignedFeedAdmit {
  FeedAdmit message = 1;
  Signature signature = 2; // To be valid, the signature must be from a key previously admitted to the party.
}

message FeedAdmitOnFeed {
  bytes id = 1;
  bytes parent = 2; // The id of the message admitting the signing key.
  bytes type = 3; // This matches the FeedAdmit type, but is outside the signed portion of the message.
  Timestamp timestamp = 4;
  SignedFeedAdmit data = 5;
}

// This portion needs stably sorted for signing and verification.
message FeedGenesis {
  bytes type = 1;  // party.admit.feed
  PublicKey feed = 2; // The feed public key.
  bytes nonce = 3;
  Timestamp created = 4;
  PublicKey admit = 5; // A public key to admit (normally a device pseudonym key).
}

message SignedFeedGenesis {
  FeedAdmit message = 1;
  Signature feedSignature = 2; // Must be signed by the feed private key.
  Signature admittedKeySignature = 3; // Must be signed by the admitted key (usually a device pseudonym key).
}

message FeedGenesisOnFeed {
  bytes id = 1;
  bytes type = 2; // This matches the FeedGenesis type, but is outside the signed portion of the message.
  Timestamp timestamp = 3;
  SignedFeedGenesis data = 4;
}
