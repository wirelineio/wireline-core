//
// Copyright 2019 Wireline, Inc.
//

syntax = "proto3";
package dxos.greet;

import "google/protobuf/any.proto";

message Message {
  google.protobuf.Any payload = 1;
}

// A Greeter command.  We currently have two commands, 'negotiate' and 'submit'.  Every Command requires a token, which
// is a kind of single-use pre-shared secret, bound to a specific party.   The initial token is normally communicated by
// an out-of-band mechanism (eg, email, QR code, etc.).  A Command may optionally return a new token to be used for a
// subsequent invocation.
message Command {
  string token = 1;      // The token itself.
  bytes party = 2;       // The public key of the party.  This must match the party for which the token was issued.
  string command = 3;    // The command name.
  repeated google.protobuf.Any params = 4;    // Parameters to the command.
};

// The initial command is 'negotiate', which gives an opportunity for both ends to communicate any additional details
// or requirements to each other.  The NegotiateResponse includes a new token, as well of random bytes which much be
// included in the signed portion of messages submitted in a 'submit' command (proving ownership of the keys in
// question).
message NegotiateResponse {
  string token = 1;
  bytes challenge = 2;
};

// The 'submit' command is the final command during Greeting, and takes an array of SignedMessages which the invitee
// would like added to the Party.  The standard case would be a message admitting a Pseudonym key, a DevicePseudonym
// key, and a Feed.  The SubmitResponse includes a copy of each of the messages as written to the Party (now in an
// Envelope) and the Feed and key hints necessary to bootstrap the invitee into the Party.
message SubmitResponse {
  repeated google.protobuf.Any copies = 1;
  Hints hints = 2;
};

// Feed and key hints are required by the invitee, because even though the Party members now trust it, it does not trust
// them.  Until it has a chance to replicate, it cannot construct its own understanding of the Party from party.*
// messages, but neither can it replicate unless it trusts its peers.  The Hints break this cycle , by providing an
// initial set of keys and Feeds to trust.  Currently, the hints are merely arrays of keys and Feeds, but this should
// be changed to be the full set of party.* messages.
message Hints {
  repeated bytes keys = 1;
  repeated bytes feeds = 2;
}
